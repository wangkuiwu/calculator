
计算器Jar包

# 1. 基本说明

Calculator类支持对运算表达式的计算。表达式支持的数字、括号和运算符说明如下。

## 1.1 支持的数字

0123456789+-.

## 1.2 支持的括号

**()**

## 1.3 支持的的运算符

### 1.3.1 双目运算符。支持的双目运算如下表格，
     ---------------------------------------
     |      运算名称    |      运算符      |
     ---------------------------------------
     |      加法        |        +         |
     |      减法        |        -         |
     |      乘法        |        *         |
     |      除法        |        /         |
     |      除法取余    |        %         |
     |      幂          |        ^         |
     ---------------------------------------

### 1.3.2 单目运算符。支持的单目运算如下表格，
     -------------------------------------------------------
     |      运算名称                    |      运算符      |
     -------------------------------------------------------
     |      正弦(sin)                   |        s         |
     |      余弦(cos)                   |        c         |
     |      正切(tan)                   |        t         |
     |      以常数(e)为底的对数(ln)     |        n         |
     |      以自然数(10)为底的对数(ln)  |        g         |
     |      绝对值(abs)                 |        a         |
     |      平方根(sqrt)                |        r         |
     -------------------------------------------------------

### 1.3.3 阶乘运算符。支持的阶乘运算如下表格，
     ----------------------------------------
     |      运算名称     |      运算符      |
     ----------------------------------------
     |      阶乘(!)      |        !         |
     ----------------------------------------


# 2. 使用示例

    import cn.skw.calculator.Calculator;
    import cn.skw.calculator.UnparsableEquationException;

    ...
    // 表达式
    String equation = "2+(-2)^3+8*(1-(-1))";
    // 计算表达式的结果
    // 计算成功的话，结果保存在result中；若表达式解析失败，则捕获异常UnparsableEquationException
    try {
        String result = Calculator.execute(equation);
    } catch (UnparsableEquationException e) {
        e.printStackTrace();
    }


# 3. Linux中Calculator对应的Jar包打包和调用方法

第1步：生成所有的.class文件

    $ javac cn/skw/calculator/Calculator.java

第2步：将全部的.class文件打包成calculator.jar

    $ find cn/skw/calculator/ -name "*.class" |xargs jar cvf calculator.jar

第3步：若Test.java调用Calculator方法，则编译和运行Test.java的指令如下。

    $ javac -cp calculator.jar Test.java
    $ java -cp $CLASSPATH:calculator.jar Test

说明：$CLASSPATH是JDK的环境变量




# 4. Calculator算法概要

## 4.1 将各个运算单元列成单独的类
每个类重载isvalidate(List list, int position)来判断是否有效。

## 4.2 parse()中
可以将对每个运算单元位置的判断统一处理。
注：如果完成1的话，2可以忽略。


## 4.3 parse()中，处理"正负号"
将"+"删除，将"-"转换为(-1)*

## 4.4 parse()中，如果包含小数/根号/sin/cos/tan/ln/log等操作符，则进行小数计算，否则，进行整数计算。
## 4.5 calBase()中，改用栈来进行操作。
## 4.6 (忽略)对空格进行处理。
## 4.7 注意优先级： 2^3!




# 5. Calculator后期优化建议

(01) 添加科学计算器。目前支持的运算操作有限，后期可以考虑添加更多的操作运算。
(02) 优化可识别的操作符。例如，现阶段而言，求cos0的值，必须调用Calculator.execute("c0");而无法识别Calculator.execute("cos0")。后期可以考虑支持对sin,cos,tan,lg,ln等操作符的解析。




